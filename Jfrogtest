  pipeline {
 agent {node {label 'master'}}
 environment {
  dotnet = "${tool 'MSBuild15_Path'}"
 }
 stages {
  stage('Checkout') {
   steps {
    checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '21dcef66-4390-4b26-8345-bdce1adc6a5d', url: 'https://github.com/rohithks/dotnet-project.git']]])
   }
  }
  stage('Load Properties') {
  steps {
    load "helloworldjenkins.properties"
  }
  }
  
  stage('Artifactory Upload') {
   steps {
      bat "echo ${env.Nupkg_Path}"
      script { 
	  def buildVersion = currentBuild.number
          def server = Artifactory.server 'Jfrog_Artifactory'
          def buildInfo = Artifactory.newBuildInfo()
          buildInfo.name = "${BUILD_INFO_NAME}"
          buildInfo.number = "${BUILD_INFO_NUMBER}"
          server.publishBuildInfo buildInfo
                def uploadSpec = """{
                    "files": [
		    {
                       "pattern":"${env.Nupkg_Path}/sample.3.0.0.nupkg",
                       "target": "Nuget-repo-test/${JIRA_STORY_ID}/"
                    }
		    ]
                 }"""
                  server.upload(uploadSpec) 
		  //def buildInfo1 = server.download downloadSpec
                  def buildInfo2 = server.upload uploadSpec
                  //buildInfo1.append buildInfo2
                  server.publishBuildInfo buildInfo2
                  
	 }
      }
    }
    
  stage('JIRA') {
   steps {
     script { 
     withEnv(['JIRA_SITE=JIRA']) {
     def serverInfo = jiraGetServerInfo()
      echo serverInfo.data.toString()
      def jiraIssues = jiraIssueSelector(issueSelector: [$class: 'DefaultIssueSelector'])
      jiraIssues.each { issue ->
      jiraAddComment comment: "{panel:bgColor=#97FF94}{code}Code was added to address this issue in build ${build}{code} {panel}", idOrKey: issue, site: ${JIRA_SITE}
      def searchResults = jiraJqlSearch jql: "project = DevOps AND issuekey = 'DEV-1'"
      def issues = searchResults.data.issues
     
      for (i = 0; i <issues.size(); i++) {
        def fixVersion = jiraNewVersion version: [name: "new-fix-version-1.0",
                                                project: "DevOps"]
         def testIssue = [fields: [fixVersions: [fixVersion.data]]]
      response = jiraEditIssue idOrKey: issues[i].key, issue: testIssue
    }
   }
  }
 }
 }
}
}
}
   

  
  
	
