  pipeline {
  agent any
  environment {
  dotnet = "${tool 'MSBuild15_Path'}"
 }
 stages {
  stage('Checkout') {
   steps {
    checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: '21dcef66-4390-4b26-8345-bdce1adc6a5d', url: 'https://github.com/rohithks/dotnet-project.git']]])
   }
   
    post {
                always {
                    script { 
                withEnv(['JIRA_SITE=JIRA']) {
                def serverInfo = jiraGetServerInfo()
                echo serverInfo.data.toString()
                jiraAddComment idOrKey: 'DEV-1', comment:"Git Chechout ${currentBuild.currentResult}"
		
                
    
            }
         }
      }
    }
  }

  stage('Load Properties') {
  steps {
 
    load "helloworldjenkins.properties"
                
  }
     post {
                always {
                    script { 
                withEnv(['JIRA_SITE=JIRA']) {
                def serverInfo = jiraGetServerInfo()
                echo serverInfo.data.toString()
                jiraAddComment idOrKey: 'DEV-1', comment:"Load Propertyfile ${currentBuild.currentResult}"
		
                
    
            }
         }
       }
     }
  }
  
  stage ('Build & SonarAnalysis'){
   steps {
      script {
            if ( "${MS_BUILD}" == 'YES'  &&  "${SONAR_ANALYSIS}" == 'YES' ) {  
                 withCredentials([string(credentialsId: 'Sonarqube_Token', variable: 'SonarqubeToken')]) {					
               bat "\"${tool 'SonarQube_MSBuild'}\\SonarScanner.MSBuild.exe\" begin /k:\"HelloWorld\" /d:sonar.host.url=" + env.SonarQube_URL + " /d:sonar.login=${SonarqubeToken}"
				
               bat "\"${tool 'MSBuild15_Path'}\\msbuild.exe\" 1-hello-world\\1-hello-world.sln /t:Rebuild /p:DeployOnBuild=true /p:PackageAsSingleFile=true /p:platform=\"any cpu\" /p:configuration=\"release\""
				
               bat "\"${tool 'SonarQube_MSBuild'}\\SonarScanner.MSBuild.exe\" end /d:sonar.login=${SonarqubeToken}" }
               
	      } else {
               echo 'No Build and Sonaranalysis'
        }
      }
    }
  
      post {
                always {
                    script { 
                withEnv(['JIRA_SITE=JIRA']) {
                def serverInfo = jiraGetServerInfo()
                echo serverInfo.data.toString()
                jiraAddComment idOrKey: 'DEV-1', comment:"SonarAnalysis&Build ${currentBuild.currentResult}"
                
    
            }
         }
      }
  }
  }
  }
  }
  

	
	
 
    
  
  
  
	
